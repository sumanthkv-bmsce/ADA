#include <iostream>

using namespace std;
void permu(int,int[],bool[]);
void printPerma1(int [],int,int,bool []);
void printPerma2(int [],int,int,bool []);
bool leftToRight = false;
bool rightToLeft = true;

int main() {
        int n,a[100];
        bool dir[100];
        cin>>n;
        for(int i=0;i<n;i++) {
                a[i] = i+1;
        }
         for(int i=0;i<n;i++) {
                dir[i] = rightToLeft;
        }
        
        for(int i=0;i<5;i++) {
                permu(n,a,dir);
        }
 }
 
 
 void permu(int n,int a[],bool dir[]) {
        int i,max1,max2;
        for(int i=0;i<n;i++) {
                cout<<a[i]<<" ";
        }
        cout<<endl;
       
        
        max1 = 0;
        max2 = 0;
        for(i=0;i<n;i++) {
                if(dir[i]==leftToRight) {
                        if(a[i]>a[i+1] && i+1!=n) {
                                max1 = i;
                        }
                }
                
                if(dir[i]==rightToLeft) {
                        if(i>0 && a[i]>a[i-1]) {
                                max2 = i;
                        }
                }
       }
       if(max1>max2) {
                printPerma1(a,n,max1,dir);
        }
       else {
                printPerma2(a,n,max2,dir);
        }
}

void printPerma1(int a[],int n,int max,bool dir[]) {
        swap(a[max+1],a[max]);
        int max1 = a[max+1];
        for(int i=0;i<n;i++) {
                if(max1<a[i]) {
                        if(dir[i] == rightToLeft) {
                                dir[i] = leftToRight;
                        }
                        else {
                                dir[i] = rightToLeft;
                        }
                }
        }
                             
}            
                  
void printPerma2(int a[],int n,int max,bool dir[]) {
        swap(a[max-1],a[max]);
        int max1 = a[max-1];
        for(int i=0;i<n;i++) {
                if(max1<a[i]) {
                       if(dir[i] == rightToLeft) {
                                dir[i] = leftToRight;
                        }
                        else {
                                dir[i] = rightToLeft;
                        }
                }
        }
                             
}                         
        
        
        
